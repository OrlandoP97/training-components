/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface NavBar {
        "brand": string;
        "fixed": boolean;
        "transparent": boolean;
    }
    interface NavbarItem {
        "active": boolean;
        "href": string;
        "text": string;
    }
}
export interface NavbarItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNavbarItemElement;
}
declare global {
    interface HTMLNavBarElement extends Components.NavBar, HTMLStencilElement {
    }
    var HTMLNavBarElement: {
        prototype: HTMLNavBarElement;
        new (): HTMLNavBarElement;
    };
    interface HTMLNavbarItemElementEventMap {
        "linkClicked": any;
    }
    interface HTMLNavbarItemElement extends Components.NavbarItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNavbarItemElementEventMap>(type: K, listener: (this: HTMLNavbarItemElement, ev: NavbarItemCustomEvent<HTMLNavbarItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNavbarItemElementEventMap>(type: K, listener: (this: HTMLNavbarItemElement, ev: NavbarItemCustomEvent<HTMLNavbarItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNavbarItemElement: {
        prototype: HTMLNavbarItemElement;
        new (): HTMLNavbarItemElement;
    };
    interface HTMLElementTagNameMap {
        "nav-bar": HTMLNavBarElement;
        "navbar-item": HTMLNavbarItemElement;
    }
}
declare namespace LocalJSX {
    interface NavBar {
        "brand"?: string;
        "fixed"?: boolean;
        "transparent"?: boolean;
    }
    interface NavbarItem {
        "active"?: boolean;
        "href"?: string;
        "onLinkClicked"?: (event: NavbarItemCustomEvent<any>) => void;
        "text"?: string;
    }
    interface IntrinsicElements {
        "nav-bar": NavBar;
        "navbar-item": NavbarItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "nav-bar": LocalJSX.NavBar & JSXBase.HTMLAttributes<HTMLNavBarElement>;
            "navbar-item": LocalJSX.NavbarItem & JSXBase.HTMLAttributes<HTMLNavbarItemElement>;
        }
    }
}
